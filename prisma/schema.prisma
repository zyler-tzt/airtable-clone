// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model View {
  id        Int       @id @default(autoincrement())
  name      String

  table     Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId   Int

  sortings  Sorting[]
  filters   Filter[]
  viewFields    ViewField[]
}

model Sorting {
  id        Int     @id @default(autoincrement())
  order     String

  view      View    @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId    Int

  field     Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   Int
}

model Filter {
  id        Int     @id @default(autoincrement())
  operator  String 
  value     String

  view      View    @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId    Int

  field     Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   Int
}

model ViewField {
  id        Int     @id @default(autoincrement())

  view      View    @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId    Int

  field     Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   Int

  @@unique([viewId, fieldId])
}

model Base {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    numTables Int      @default(autoincrement())
    slug      String   @unique

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    tables    Table[]

    @@index([name])
}

model Table {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique

  base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  baseId    Int

  fields    Field[]
  rows      Row[]
  view      View[]
}

model Field {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  //pos     Int reminder to self: uncomment when implement field pos changing

  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId   Int

  cells     Cell[]
  viewFields ViewField[]
  sorting   Sorting[]
  filter    Filter[]
}

model Row {
  id        Int      @id @default(autoincrement())

  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId   Int

  cells     Cell[]
}

model Cell {
  id        Int      @id @default(autoincrement())
  value     String

  field     Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   Int

  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  rowId     Int

  @@unique([fieldId, rowId])
}

model User {
  id            String          @id @default(cuid())
	username      String?					@unique
	password			String?
	createdAt			DateTime				@default(now())
	updatedAt			DateTime				@updatedAt
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  Base Base[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

